document.addEventListener('DOMContentLoaded',function(){const wxs_isUserLoggedIn=window.wxs_isUserLoggedIn||false;const wxs_current_user_id=window.wxs_current_user_id||false;const wxs_isArticlePage=window.wxs_isArticlePage||false;const config=window.wxsWatermarkConfig||{};const isDebug=config.debug_mode===1||config.debug_mode==='1';if(isDebug){console.log('文本盲水印JS初始化 - 纯JS模式');console.log('用户登录状态:',wxs_isUserLoggedIn);console.log('当前用户ID:',wxs_current_user_id);console.log('是否为文章页面:',wxs_isArticlePage);console.log('完整配置信息:',config)}const isEnabled=config.enable===1||config.enable==='1'||config.enable===true||config.enable==='true';if(isDebug){console.log('是否启用水印（判断结果）:',isEnabled)}if(!isEnabled){return}if(!wxs_isArticlePage){if(isDebug){console.log('当前不是文章页面，不处理水印')}return}if(config.run_mode==='hybrid'&&wxs_isUserLoggedIn){if(isDebug){console.log('混合模式 - 登录用户，不执行JS水印处理')}return}const userAgent=navigator.userAgent.toLowerCase();const botUAs=(config.bot_ua||[]).map(bot=>bot.trim().toLowerCase());const isBot=botUAs.some(bot=>userAgent.includes(bot));if(isBot){if(isDebug){console.log('检测到爬虫，不插入水印')}return}const articleContainer=document.querySelector('.article-content')||document.querySelector('.post-content')||document.querySelector('#content')||document.querySelector('.entry-content')||document.body;if(!articleContainer){if(isDebug){console.error('未找到文章内容容器，无法插入水印')}return}let pageIP='unknown';let ipReady=false;let pendingTasks=[];async function fetchPageIP(){if(isDebug){console.log('开始获取IP...')}try{const res=await fetch(config.ip_endpoint);if(!res.ok)throw new Error(`HTTP状态码:${res.status}`);const data=await res.json();pageIP=data.success?data.ip:'unknown-ip';if(isDebug){console.log('IP获取成功:',pageIP)}}catch(e){if(isDebug){console.error('IP获取失败:',e)}pageIP='unknown-ip'}finally{ipReady=true;pendingTasks.forEach(task=>task());pendingTasks=[]}}fetchPageIP();if(isDebug){console.log('原始配置值:',{include_ip:config.watermark_content?.include_ip,include_ip_type:typeof config.watermark_content?.include_ip,include_user:config.watermark_content?.include_user,include_time:config.watermark_content?.include_time,include_custom:config.watermark_content?.include_custom})}const normalizedConfig={...config,watermark_content:{...config.watermark_content,include_ip:config.watermark_content?.include_ip===1||config.watermark_content?.include_ip==='1'||config.watermark_content?.include_ip===true||config.watermark_content?.include_ip==='true',include_user:config.watermark_content?.include_user===1||config.watermark_content?.include_user==='1'||config.watermark_content?.include_user===true||config.watermark_content?.include_user==='true',include_time:config.watermark_content?.include_time===1||config.watermark_content?.include_time==='1'||config.watermark_content?.include_time===true||config.watermark_content?.include_time==='true',include_custom:config.watermark_content?.include_custom===1||config.watermark_content?.include_custom==='1'||config.watermark_content?.include_custom===true||config.watermark_content?.include_custom==='true',}};if(isDebug){console.log('转换后的配置值:',{include_ip:normalizedConfig.watermark_content.include_ip,include_user:normalizedConfig.watermark_content.include_user,include_time:normalizedConfig.watermark_content.include_time,include_custom:normalizedConfig.watermark_content.include_custom})}class WatermarkInfo{constructor(contentConfig){this.contentConfig=contentConfig;if(isDebug){console.log('水印内容配置:',this.contentConfig)}}getIP(){return pageIP}getUser(){return wxs_isUserLoggedIn?(wxs_current_user_id||'user'):'guest'}formatTime(){const d=new Date();return`${d.getFullYear()}-${(d.getMonth()+1).toString().padStart(2,'0')}-${d.getDate().toString().padStart(2,'0')}${d.getHours().toString().padStart(2,'0')}:${d.getMinutes().toString().padStart(2,'0')}:${d.getSeconds().toString().padStart(2,'0')}`}async generateRaw(){const parts=[];const{include_ip,include_user,include_time,include_custom,custom_text}=this.contentConfig;if(include_ip){if(isDebug){console.log('include_ip为true，添加IP信息')}parts.push(`IP:${this.getIP()}`)}else{if(isDebug){console.log('include_ip为false，不添加IP信息')}}if(include_user){if(isDebug){console.log('include_user为true，添加用户信息')}parts.push(`USER:${this.getUser()}`)}else{if(isDebug){console.log('include_user为false，不添加用户信息')}}if(include_time){if(isDebug){console.log('include_time为true，添加时间信息')}parts.push(`TIME:${this.formatTime()}`)}else{if(isDebug){console.log('include_time为false，不添加时间信息')}}if(include_custom&&custom_text){if(isDebug){console.log('include_custom为true，添加自定义文本')}parts.push(custom_text)}else{if(isDebug){console.log('include_custom为false或无自定义文本，不添加自定义信息')}}const raw=parts.join('|');if(isDebug){console.log('最终生成的水印原始内容:',raw)}return raw}}class WatermarkProcessor{constructor(config){this.config=config;this.info=new WatermarkInfo(config.watermark_content||{});this.minLength=parseInt(config.min_paragraph_length)||20;this.insertMethod=parseInt(config.insert_method)||2;this.random={count_type:parseInt(config.random?.count_type)||2,custom_count:parseInt(config.random?.custom_count)||1,word_based_ratio:parseInt(config.random?.word_based_ratio)||400};this.fixed={interval:parseInt(config.fixed?.interval)||20};this.isDebug=config.debug_mode==='1'||config.debug_mode===1;this.maxPositionAttempts=100;if(isDebug){console.log('水印处理器初始化完成')}}byteToChar(byte){if(!Number.isInteger(byte)||byte<0||byte>255)return'';return byte<16?String.fromCodePoint(0xFE00+byte):String.fromCodePoint(0xE0100+(byte-16))}async generateWatermark(){const raw=await this.info.generateRaw();if(this.isDebug){const debugMark=`[水印调试JS模式：${raw}]`;console.log('生成调试水印:',debugMark);return debugMark}return Array.from(new TextEncoder().encode(raw)).map(b=>this.byteToChar(b)).join('')}getInsertCount(textLength){let count=this.random.count_type===1?Math.max(1,this.random.custom_count):Math.max(1,Math.floor(textLength/this.random.word_based_ratio));const maxPossibleCount=Math.floor(textLength/50);count=Math.min(count,maxPossibleCount);if(isDebug){console.log(`插入次数:配置=${this.random.custom_count},实际=${count}`)}return count}getRandomPositions(textLength){const positions=[];const count=this.getInsertCount(textLength);const safeStart=5;const safeEnd=textLength-5;if(safeStart>=safeEnd){return[Math.floor(textLength/2)]}const maxPossiblePositions=Math.floor((safeEnd-safeStart)/30);const actualCount=Math.min(count,maxPossiblePositions);if(isDebug){console.log(`生成随机位置:需求=${count},实际=${actualCount},范围=[${safeStart},${safeEnd}]`)}for(let i=0;i<actualCount;i++){let pos;let attempts=0;let foundValidPosition=false;do{pos=Math.floor(Math.random()*(safeEnd-safeStart))+safeStart;pos=Math.max(safeStart,Math.min(pos,safeEnd));attempts++;if(attempts>=this.maxPositionAttempts){if(isDebug){console.warn(`生成位置${i+1}超过最大尝试次数(${this.maxPositionAttempts})，可能继续位置`)}break}if(!positions.some(p=>Math.abs(p-pos)<30)){foundValidPosition=true;break}}while(true);if(foundValidPosition){positions.push(pos);if(isDebug){console.log(`生成位置${i+1}:${pos}(尝试${attempts}次)`)}}else{if(isDebug){console.warn(`无法为位置${i+1}找到合适位置，跳过`)}}}return positions.sort((a,b)=>a-b)}async processText(text){if(typeof text!=='string'){if(isDebug){console.error('无效文本类型，跳过处理')}return text}const textLength=text.length;if(isDebug){console.log(`处理文本:长度=${textLength},最小要求=${this.minLength}`)}if(textLength<this.minLength){return text}let watermark;try{watermark=await this.generateWatermark();if(!watermark)return text}catch(e){if(isDebug){console.error('水印印生成失败:',e)}return text}switch(this.insertMethod){case 1:return text+watermark;case 2:{const positions=this.getRandomPositions(textLength);if(isDebug){console.log(`随机插入位置:${JSON.stringify(positions)}`)}let result='';let lastPos=0;for(const pos of positions){const currentPos=Math.max(lastPos,pos);result+=text.substring(lastPos,currentPos);result+=watermark;lastPos=currentPos}result+=text.substring(lastPos);return result}case 3:{let result='';for(let i=0;i<textLength;i++){result+=text[i];if((i+1)%this.fixed.interval===0&&i<textLength-1){result+=watermark}}return result}default:return text}}}const processor=new WatermarkProcessor(normalizedConfig);async function processTextNode(node){if(node.nodeType!==3||!node.textContent.trim())return;if(!ipReady)await new Promise(resolve=>pendingTasks.push(resolve));const original=node.textContent;const processed=await processor.processText(original);if(processed!==original){node.textContent=processed}}async function processPTag(pTag){if(pTag.tagName!=='P')return;if(!ipReady)await new Promise(resolve=>pendingTasks.push(resolve));const fragment=document.createDocumentFragment();const promises=[];pTag.childNodes.forEach(child=>{if(child.nodeType===3){promises.push((async()=>{const originalText=child.textContent;const processedText=await processor.processText(originalText);fragment.appendChild(document.createTextNode(processedText||originalText))})())}else{fragment.appendChild(child.cloneNode(true))}});await Promise.all(promises);pTag.innerHTML='';pTag.appendChild(fragment)}async function initStatic(){if(normalizedConfig.run_mode==='hybrid'&&wxs_isUserLoggedIn){if(isDebug){console.log('混合模式 - 登录用户，跳过JS水印初始化')}return}if(!ipReady)await new Promise(resolve=>pendingTasks.push(resolve));const pTags=articleContainer.querySelectorAll('p');if(isDebug){console.log(`找到${pTags.length}个P标签`)}const batchSize=5;for(let i=0;i<pTags.length;i+=batchSize){const batch=Array.from(pTags).slice(i,i+batchSize);await Promise.all(batch.map(p=>processPTag(p)));await new Promise(resolve=>setTimeout(resolve,50))}if(isDebug){console.log('静态内容处理完成')}}function watchDynamic(){if(normalizedConfig.run_mode==='hybrid'&&wxs_isUserLoggedIn){return}const observer=new MutationObserver(mutations=>{setTimeout(()=>{mutations.forEach(mutation=>{mutation.addedNodes.forEach(node=>{if(node.nodeType===1){if(node.tagName==='P'){ipReady?processPTag(node):pendingTasks.push(()=>processPTag(node))}else{node.querySelectorAll('p').forEach(p=>{ipReady?processPTag(p):pendingTasks.push(()=>processPTag(p))})}}})})},100)});observer.observe(articleContainer,{childList:true,subtree:true});if(isDebug){console.log('动态内容监听已启动')}}initStatic().then(watchDynamic).catch(err=>{if(isDebug){console.error('水印处理失败:',err)}})});
